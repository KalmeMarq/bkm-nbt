import { BKMList } from 'bkm-utils';
import { BufferReader } from './BufferReader';
import { BufferWriter } from './BufferWriter';
import { ListTag } from './ListTag';
import { NBTAccounter } from './NBTAccounter';
import { Tag } from './Tag';
import { TagType } from './TagType';
import { TagVisitor } from './TagVisitor';
export declare class CompoundTag extends Tag {
    static TYPE: TagType<CompoundTag>;
    private readonly tags;
    constructor(map?: Map<string, Tag>);
    getId(): number;
    getType(): TagType<CompoundTag>;
    write(writer: BufferWriter): void;
    put(key: string, value: Tag): Tag;
    get(key: string): Tag;
    putByte(key: string, value: number): void;
    getByte(key: string): number;
    putByteArray(key: string, value: number[]): void;
    putByteArray(key: string, value: BKMList<number>): void;
    getByteArray(key: string): number[];
    putShort(key: string, value: number): void;
    getShort(key: string): number;
    putInt(key: string, value: number): void;
    getInt(key: string): number;
    putIntArray(key: string, value: number[]): void;
    putIntArray(key: string, value: BKMList<number>): void;
    getIntArray(key: string): number[];
    putFloat(key: string, value: number): void;
    getFloat(key: string): number;
    putDouble(key: string, value: number): void;
    getDouble(key: string): number;
    putLong(key: string, value: bigint): void;
    getLong(key: string): bigint;
    putLongArray(key: string, value: bigint[]): void;
    putLongArray(key: string, value: BKMList<bigint>): void;
    getLongArray(key: string): bigint[];
    putString(key: string, value: string): void;
    getString(key: string): string;
    putBoolean(key: string, value: boolean): void;
    getBoolean(key: string): boolean;
    getCompound(key: string): CompoundTag;
    getList(key: string, type: number): ListTag;
    private static writeNamedTag;
    static readNamedTagType(reader: BufferReader, accounter: NBTAccounter): number;
    static readNamedTagName(reader: BufferReader, accounter: NBTAccounter): string;
    static readNamedTagData(var0: TagType<any>, name: string, reader: BufferReader, depth: number, accounter: NBTAccounter): Tag;
    getTagType(key: string): number;
    getAllKeys(): Set<string>;
    merge(merging: CompoundTag): CompoundTag;
    protected entries(): Map<string, Tag>;
    contains(key: string, id?: number): boolean;
    accept(visitor: TagVisitor): void;
    copy(): CompoundTag;
    getAsString(): string;
    equals(compareTo: object): boolean;
}
